
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'sentenceVARIABLE TRUE FALSE CONJUNCTION DISJUNCTION IMPLICATION LPAREN RPAREN EQUIVALENCE NEGATION sentence : equivalence_sentence  equivalence_sentence : implication_sentence EQUIVALENCE equivalence_sentence\n                 | implication_sentence\n     implication_sentence : conjunctive_sentence IMPLICATION implication_sentence\n                | conjunctive_sentence\n     conjunctive_sentence : disjunctive_sentence CONJUNCTION conjunctive_sentence\n                   | disjunctive_sentence\n     disjunctive_sentence : negate_sentence DISJUNCTION disjunctive_sentence\n                   | negate_sentence\n     negate_sentence : NEGATION negate_sentence\n              | grouping_sentence\n     grouping_sentence : LPAREN sentence RPAREN\n                | atomic_sentence\n     atomic_sentence : TRUE\n                | FALSE\n                | VARIABLE\n    '
    
_lr_action_items = {'NEGATION':([0,7,9,14,15,16,17,],[7,7,7,7,7,7,7,]),'LPAREN':([0,7,9,14,15,16,17,],[9,9,9,9,9,9,9,]),'TRUE':([0,7,9,14,15,16,17,],[11,11,11,11,11,11,11,]),'FALSE':([0,7,9,14,15,16,17,],[12,12,12,12,12,12,12,]),'VARIABLE':([0,7,9,14,15,16,17,],[13,13,13,13,13,13,13,]),'$end':([1,2,3,4,5,6,8,10,11,12,13,18,20,21,22,23,24,],[0,-1,-3,-5,-7,-9,-11,-13,-14,-15,-16,-10,-2,-4,-6,-8,-12,]),'RPAREN':([2,3,4,5,6,8,10,11,12,13,18,19,20,21,22,23,24,],[-1,-3,-5,-7,-9,-11,-13,-14,-15,-16,-10,24,-2,-4,-6,-8,-12,]),'EQUIVALENCE':([3,4,5,6,8,10,11,12,13,18,21,22,23,24,],[14,-5,-7,-9,-11,-13,-14,-15,-16,-10,-4,-6,-8,-12,]),'IMPLICATION':([4,5,6,8,10,11,12,13,18,22,23,24,],[15,-7,-9,-11,-13,-14,-15,-16,-10,-6,-8,-12,]),'CONJUNCTION':([5,6,8,10,11,12,13,18,23,24,],[16,-9,-11,-13,-14,-15,-16,-10,-8,-12,]),'DISJUNCTION':([6,8,10,11,12,13,18,24,],[17,-11,-13,-14,-15,-16,-10,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sentence':([0,9,],[1,19,]),'equivalence_sentence':([0,9,14,],[2,2,20,]),'implication_sentence':([0,9,14,15,],[3,3,3,21,]),'conjunctive_sentence':([0,9,14,15,16,],[4,4,4,4,22,]),'disjunctive_sentence':([0,9,14,15,16,17,],[5,5,5,5,5,23,]),'negate_sentence':([0,7,9,14,15,16,17,],[6,18,6,6,6,6,6,]),'grouping_sentence':([0,7,9,14,15,16,17,],[8,8,8,8,8,8,8,]),'atomic_sentence':([0,7,9,14,15,16,17,],[10,10,10,10,10,10,10,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sentence","S'",1,None,None,None),
  ('sentence -> equivalence_sentence','sentence',1,'p_sentence','parser.py',11),
  ('equivalence_sentence -> implication_sentence EQUIVALENCE equivalence_sentence','equivalence_sentence',3,'p_equivalence_sentence','parser.py',16),
  ('equivalence_sentence -> implication_sentence','equivalence_sentence',1,'p_equivalence_sentence','parser.py',17),
  ('implication_sentence -> conjunctive_sentence IMPLICATION implication_sentence','implication_sentence',3,'p_implication_sentence','parser.py',27),
  ('implication_sentence -> conjunctive_sentence','implication_sentence',1,'p_implication_sentence','parser.py',28),
  ('conjunctive_sentence -> disjunctive_sentence CONJUNCTION conjunctive_sentence','conjunctive_sentence',3,'p_conjunctive_sentence','parser.py',38),
  ('conjunctive_sentence -> disjunctive_sentence','conjunctive_sentence',1,'p_conjunctive_sentence','parser.py',39),
  ('disjunctive_sentence -> negate_sentence DISJUNCTION disjunctive_sentence','disjunctive_sentence',3,'p_disjunctive_sentence','parser.py',49),
  ('disjunctive_sentence -> negate_sentence','disjunctive_sentence',1,'p_disjunctive_sentence','parser.py',50),
  ('negate_sentence -> NEGATION negate_sentence','negate_sentence',2,'p_negate_sentence','parser.py',60),
  ('negate_sentence -> grouping_sentence','negate_sentence',1,'p_negate_sentence','parser.py',61),
  ('grouping_sentence -> LPAREN sentence RPAREN','grouping_sentence',3,'p_grouping_sentence','parser.py',70),
  ('grouping_sentence -> atomic_sentence','grouping_sentence',1,'p_grouping_sentence','parser.py',71),
  ('atomic_sentence -> TRUE','atomic_sentence',1,'p_atomic_sentence','parser.py',80),
  ('atomic_sentence -> FALSE','atomic_sentence',1,'p_atomic_sentence','parser.py',81),
  ('atomic_sentence -> VARIABLE','atomic_sentence',1,'p_atomic_sentence','parser.py',82),
]
